# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ RC_1_2 ]
  pull_request:
    branches: [ RC_1_2 ]

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Github Actions requires a single row to be added to the build matrix.
        # See https://help.github.com/en/articles/workflow-syntax-for-github-actions.
        name: [
          ubuntu-18.04-gcc-7-aarch64-linux-gnu,
        ]
        
        include:
          - name: ubuntu-18.04-gcc-7-aarch64-linux-gnu
            os: ubuntu-18.04
            compiler: gcc
            version: "7-aarch64-linux-gnu"
            cc: "aarch64-linux-gnu-gcc-7"
            cxx: "aarch64-linux-gnu-g++-7"




    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout self
      uses: actions/checkout@v2
    - name: Checkout boost
      uses: actions/checkout@v2
      with:
        repository: 'boostorg/boost'
        submodules: true
        path: "${{ github.workspace }}/boost"
    - name: Install (Linux)
      if: runner.os == 'Linux'
      run: |
        # Required for libc6-dbg:i386 and g++-multilib packages which are
        # needed for x86 builds.
        sudo dpkg --add-architecture i386
        # clang-3.7 and earlier are not available in Bionic anymore so we get
        # them from the Xenial repositories instead.
        sudo add-apt-repository "deb http://dk.archive.ubuntu.com/ubuntu/ xenial main"
        sudo add-apt-repository "deb http://dk.archive.ubuntu.com/ubuntu/ xenial universe"
        # LLVM 9 is not in Bionic's repositories so we add the official LLVM repository.
        if [ "${{ matrix.compiler }}" = "clang" ] && [ "${{ matrix.version }}" = "9" ]; then
        sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
        fi
        sudo apt-get update
        # libc6-dbg:i386 is required for running valgrind on x86.
        sudo apt-get install -y ninja-build valgrind libc6-dbg:i386
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
        sudo apt-get install -y g++-${{ matrix.version }}
        echo "::set-env name=CC::${{ matrix.cc }}"
        echo "::set-env name=CXX::${{ matrix.cxx }}"
        else
        sudo apt-get install -y clang-${{ matrix.version }} g++-multilib
        echo "::set-env name=CC::clang-${{ matrix.version }}"
        echo "::set-env name=CXX::clang++-${{ matrix.version }}"
        fi
    - name: Install deps
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install build-essential checkinstall libboost-system-dev libboost-python-dev libboost-chrono-dev libboost-random-dev libssl-dev
    - name: ls home
      run: |
        ls ~
    - name: ls workspace
      working-directory: ${{ github.workspace }}
      run: |
        ls
    - name: Build boost
      working-directory: ${{ github.workspace }}/boost
      run: |
        ls
        bash bootstrap.sh
    - name: Configure
      if: runner.os == 'Linux'
      continue-on-error: true
      run: |
        ./autotool.sh
        ./configure --host=aarch64-linux --build=x86_64 --disable-debug --enable-encryption --with-boost-libdir=/usr/lib/aarch64-linux-gnu --with-libiconv CXXFLAGS="-std=c++14"
    - uses: actions/upload-artifact@v1
      with:
        name: Upload config.log
        path: config.log
    - name: Make
      if: runner.os == 'Linux'
      run: |
        make -j80
